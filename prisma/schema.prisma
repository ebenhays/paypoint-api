generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int          @id @default(autoincrement())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  email              String       @unique
  password           String
  firstName          String
  lastName           String
  mustChangePassword Boolean?     @default(true)
  lastChangedDate    DateTime?
  role               Role
  orgId              String
  status             Status
  primaryPhone       String?      @unique
  secondayPhone      String?
  userGuid           String?      @unique @default(uuid())
  organization       Organization @relation(fields: [orgId], references: [orgCode])

  @@index([orgId], map: "User_orgId_fkey")
}

model Organization {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orgName   String
  orgCode   String?  @unique @default(uuid())
  User      User[]
}

model Stock {
  id                 Int             @id @default(autoincrement())
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  stockName          String
  stockNo            String          @unique @default(uuid())
  categoryId         String
  marketName         String?
  price              Float
  discount           Float?          @default(0)
  fbdNo              String?
  manfDate           DateTime?       @default(now())
  expiryDate         DateTime
  noOfBoxes          Int
  itemPerbox         Int
  totalItems         Int?
  picUrl             String?
  productCode        String?
  barCodeId          String?
  priceAfterDiscount Float?
  DailySaleEod       DailySaleEod[]
  DailySaleTemp      DailySaleTemp[]
  barCode            BarCode?        @relation(fields: [barCodeId], references: [barCodeNo])
  category           Category        @relation(fields: [categoryId], references: [categoryCode])

  @@index([barCodeId], map: "Stock_barCodeId_fkey")
  @@index([categoryId], map: "Stock_categoryId_fkey")
}

model Category {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  categoryName String
  categoryCode String   @unique @default(uuid())
  Stock        Stock[]
}

model BarCode {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  barCodeName String
  barCodeNo   String   @unique
  barCodeUid  String?  @unique @default(uuid())
  Stock       Stock[]
}

model DailySale {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  batchNo    String    @unique
  totalSales Float
  salesDate  DateTime
  teller     String
  txnDate    DateTime
  Account    Account[]
}

model Account {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  txnDate   DateTime
  credit    Float
  debit     Float
  narration String
  batchId   String
  teller    String
  dailySale DailySale @relation(fields: [batchId], references: [batchNo])

  @@index([batchId], map: "Account_batchId_fkey")
}

model DailySaleEod {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  txnDate         DateTime
  qty             Int
  price           Float
  customerAmt     Float
  batchNo         String
  teller          String
  stockId         String
  tellerId        String
  txnId           String   @unique @default(uuid())
  total           Float?
  customerBalance Float?
  stock           Stock    @relation(fields: [stockId], references: [stockNo])

  @@index([stockId], map: "DailySaleEod_stockId_fkey")
}

model DailySaleTemp {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  stockId         String
  txnDate         DateTime @default(now())
  qty             Int
  price           Float
  customerAmt     Float
  batchNo         String
  teller          String
  tellerId        String
  txnId           String?  @unique @default(uuid())
  total           Float?
  customerBalance Float?
  stock           Stock    @relation(fields: [stockId], references: [stockNo])

  @@index([stockId], map: "DailySaleTemp_stockId_fkey")
}

model Customer {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  custName       String
  customerNo     String   @unique
  primaryPhone   String   @unique
  secondaryPhone String
  emailAddress   String   @unique
}

enum Role {
  TELLER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}
